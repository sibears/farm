name: Rust Code Quality Check

on:
  workflow_call:

jobs:
  clippy-check:
    name: Clippy Lint Check
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features postgres

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ./back/target
            ./back/.sqlx
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.sql') }}

      - name: Set up environment variables
        working-directory: ./back
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV
          echo "SQLX_OFFLINE=false" >> $GITHUB_ENV

      - name: Run database migrations
        working-directory: ./back
        run: |
          sqlx migrate run --database-url $DATABASE_URL

      - name: Prepare SQLx offline data
        working-directory: ./back
        run: |
          cargo sqlx prepare --database-url $DATABASE_URL

      - name: Cache SQLx prepared data
        uses: actions/cache/save@v4
        with:
          path: ./back/.sqlx
          key: ${{ runner.os }}-sqlx-${{ hashFiles('**/*.sql') }}

      - name: Run Clippy (blocking)
        working-directory: ./back
        run: |
          cargo clippy --all-features --all-targets -- -D warnings
        # -D warnings превращает предупреждения в ошибки, блокируя PR

      - name: Run cargo fmt check
        working-directory: ./back
        run: |
          cargo fmt --all -- --check
        # Проверяет форматирование кода

      - name: Run cargo check
        working-directory: ./back
        run: |
          cargo check --all-features --all-targets
