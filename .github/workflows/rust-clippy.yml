name: Rust Clippy Analysis

on:
  push:
    branches: ["main"]
    paths:
      - "back/**"
  pull_request:
    branches: ["main"]
    paths:
      - "back/**"
  schedule:
    - cron: "19 9 * * 0"

jobs:
  rust-clippy-analyze:
    name: Run rust-clippy analyzing
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Install required cargo tools
        run: |
          cargo install clippy-sarif sarif-fmt
          cargo install sqlx-cli --no-default-features --features postgres

      - name: Cache cargo and SQLx data
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ./back/target
            ./back/.sqlx
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.sql') }}

      - name: Set up environment variables
        working-directory: ./back
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV

      - name: Run database migrations
        working-directory: ./back
        run: |
          sqlx migrate run --database-url $DATABASE_URL

      - name: Prepare SQLx offline data
        working-directory: ./back
        run: |
          cargo sqlx prepare --database-url $DATABASE_URL

      - name: Run rust-clippy
        working-directory: ./back
        run: |
          cargo clippy \
            --all-features \
            --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
        continue-on-error: true

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./back/rust-clippy-results.sarif
          wait-for-processing: true
